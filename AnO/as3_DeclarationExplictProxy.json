{
  "Common": {
    "class": "Tenant",
    "Shared": {
      "class": "Application",
      "template": "shared",
      "serviceAddress": {
        "class": "Service_Address",
        "virtualAddress": "0.0.0.0"
      },
      "tcp_profile_opt28": {
        "class": "TCP_Profile",
        "tcpOptions":[
          {"option": 28,"when": "first"}
        ],
        "initCwnd": 10,
        "initRwnd": 10
      },
      "srcipToDatagroup": {
        "class": "Data_Group",
        "keyDataType": "ip",
        "records": [
           {
               "key": "0.0.0.0/0",
               "value": "local_vpc_datagroup"
           },
           {
               "key": "10.21.21.0/27",
               "value": "us-east-1_123456_datagroup"
           },
           {
            "key": "104.219.105.84/32",
            "value": "us-east-1_123456_datagroup"
           }
       ]
      },
      "local_vpc_datagroup": {
           "class": "Data_Group",
           "keyDataType": "string",
           "records": [
               {
                   "key": "us-east-2.ec2.archive.ubuntu.com",
                   "value": "all_uris"
               },
               {
                "key": "server.proxy.com",
                "value": "all_uris"
               }
           ]
      },
      "us-east-1_123456_datagroup": {
           "class": "Data_Group",
           "keyDataType": "string",
           "records": [
               {
                   "key": "f5.com",
                   "value": "all_uris"
               },
               {
                   "key": "udf.f5.com",
                   "value": "all_uris"
               }
           ]
      },
      "us-east-1_654321_datagroup": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
            {
                "key": "noh",
                "value": "all_uris"
            },
            {
              "key": "method",
              "value": "GET,POST"
            },
            {
              "key": "contentLenMin",
              "value": "310000"
            },
            {
              "key": "contentLenMax",
              "value": "320000"
            },
            {
              "key": "ipi",
              "value": "true"
            }
        ]
      },
      "noh_options": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
            {
                "key": "noh",
                "value": "noh_options"
            }
        ]
      },
      "proxyFilterHeaderToDatagroup": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
        ]
      },
      "sharedDatagroup": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
          {
            "key": "shared",
            "value": "shared_datagroup"
          }
        ]
      },
      "explicitPxy_bypass": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
          {"key": "example.com"},
          {"key": "f5.com"},
          {"key": "cisco.com"}
        ]
      },
      "all_uris": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
          {
            "key": "/"
          }
        ]
      },
      "shared_datagroup": {
        "class": "Data_Group",
        "keyDataType": "string",
        "records": [
          {"key": "/"}
        ]
      },
      "explicitProxy_irule": {
        "class": "iRule",
        "iRule": {
          "base64": ""
        }
      },
      "explicitHttps_irule": {
        "class": "iRule",
        "iRule": {
          "base64": ""
        }
      },
      "telemetry_local_rule": {
        "remark": "Only required when TS is a local listener",
        "class": "iRule",
        "iRule": "when CLIENT_ACCEPTED {\n  node 127.0.0.1 6514\n}"
      },
      "telemetry_local": {
        "remark": "Only required when TS is a local listener",
        "class": "Service_TCP",
        "virtualAddresses": [
          "255.255.255.254"
        ],
        "virtualPort": 6514,
        "iRules": [
          "telemetry_local_rule"
        ]
      },
      "telemetry_pool": {
        "class": "Pool",
        "members": [
          {
            "enable": true,
            "serverAddresses": [
              "255.255.255.254"
            ],
            "servicePort": 6514
          }
        ],
        "monitors": [
          {
            "bigip": "/Common/tcp"
          }
        ]
      },
      "telemetry_pool2": {
        "class": "Pool",
        "members": [
          {
            "enable": true,
            "serverAddresses": [
              "255.255.255.254"
            ],
            "servicePort": 6514
          }
        ],
        "monitors": [
          {
            "bigip": "/Common/tcp"
          }
        ]
      },
      "telemetry_hsl": {
        "class": "Log_Destination",
        "type": "remote-high-speed-log",
        "protocol": "tcp",
        "pool": {
          "use": "telemetry_pool"
        }
      },
      "ssl_bypass_fqdn_pool": {
        "class": "Pool",
        "monitors": [
            "tcp"
        ],
        "members": [
            {
                "servicePort": 443,
                "addressDiscovery": "fqdn",
                "autoPopulate": true,
                "hostname": "example.com",
                "shareNodes": true
            }
        ]
      }
    }
  },
  "ExplicitProxy": {
    "class": "Tenant",
    "explicitProxy": {
      "class": "Application",
      "template": "generic",
      "explicitProxyVS": {
        "class": "Service_HTTP",
        "layer4": "tcp",
        "virtualAddresses": [
          {
            "use": "/Common/Shared/serviceAddress"
          }
        ],
        "profileTCP": {
          "use":"/Common/Shared/tcp_profile_opt28"
        },
        "persistenceMethods": [],
        "virtualPort": 11443,
        "profileHTTP": {
          "use": "explicitProxyhttp_profile"
        },
        "snat": "auto",
        "allowVlans": [
          {
            "bigip": "/Common/internal"
          }
        ],
        "iRules": [
          "/Common/Shared/explicitProxy_irule"
        ]
      },
      "explicitProxyhttp_profile": {
        "class": "HTTP_Profile",
        "proxyType": "explicit",
        "requestChunking": "rechunk",
        "responseChunking": "rechunk",
        "resolver": {
          "bigip": "/Common/explicitProxy_resolver"
        },
        "tunnelName": "/Common/explicitProxy_tunnel"
      },
      "explicitProxyL4_profile": {
        "class": "L4_Profile",
        "looseClose": true,
        "looseInitialization": true
      },
      "explicitProxy_HTTPS_VS": {
          "class": "Service_HTTPS",
          "layer4": "tcp",
          "redirect80": false,
          "virtualAddresses": [
              {
                  "use": "/Common/Shared/serviceAddress"
              }
          ],
          "profileTCP": {
              "use":"/Common/Shared/tcp_profile_opt28"
          },
          "persistenceMethods": [],
          "translateServerPort": false,
          "translateServerAddress": false,
          "virtualPort": 443,
          "profileHTTP": {
              "bigip": "/Common/http"
          },
          "snat": "auto",
          "allowVlans": [
              {
                  "bigip": "/Common/explicitProxy_tunnel"
              }
          ],
          "clientTLS": "clientTLS_SSL_FORWARD_PROXY",
          "serverTLS": [
              {
                  "bigip": "/Common/serverTLS_SSL_FORWARD_PROXY"
              }
          ],
          "iRules": [
              "/Common/Shared/explicitHttps_irule"
          ]
      },
      "serverTLS_SSL_FORWARD_PROXY": {
        "class": "TLS_Server",
        "remark": "something unique for each update to the datagroup",
        "certificates": [
          {
            "proxyCertificate": "SSL_FORWARD_PROXY",
            "certificate": "defaultCert"
          }
        ],
        "ciphers": "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384",
        "forwardProxyEnabled": true,
        "forwardProxyBypassEnabled": true,
        "forwardProxyBypassAllowlist": {
          "use": "/Common/Shared/explicitPxy_bypass"
        }
      },
      "clientTLS_SSL_FORWARD_PROXY": {
        "class": "TLS_Client",
        "forwardProxyEnabled": true,
        "forwardProxyBypassEnabled": true,
        "trustCA": "none"
      },
      "SSL_FORWARD_PROXY": {
        "class": "Certificate",
        "certificate": {"bigip":"/Common/SSL_FORWARD_PROXY.crt"},
        "privateKey": {"bigip":"/Common/SSL_FORWARD_PROXY.key"},
        "chainCA": {"bigip": "/Common/SSL_FORWARD_PROXY_CHAIN.crt"}
      },
      "defaultCert": {
        "class": "Certificate",
        "certificate": {"bigip":"/Common/default.crt"},
        "privateKey": {"bigip":"/Common/default.key"}
      }
    }
  },
  "class": "ADC",
  "schemaVersion": "3.26.0",
  "label": "autoscale_ltm_withExplicitProxy",
  "id": "autoscale_ltm",
  "remark": "autoscale_ltm",
  "updateMode": "selective",
  "controls": {
    "archiveTimestamp": "2020-01-29T01:27:54.691Z"
  }
}
